#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6-24-gf6e263 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// de.tud.plt.r43ples.triplestoreInterface.TripleStoreInterface
	c6566 [label=<<table title="de.tud.plt.r43ples.triplestoreInterface.TripleStoreInterface" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./TripleStoreInterface.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> TripleStoreInterface </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + TripleStoreInterface() </td></tr>
<tr><td align="left" balign="left"> # init() </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> # close() </font></td></tr>
<tr><td align="left" balign="left"> + executeSelectConstructAskQuery(sparqlQuery : String, format : String) : String </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + executeSelectQuery(selectQueryString : String) : ResultSet </font></td></tr>
<tr><td align="left" balign="left"> + executeSelectQuery(selectQueryString : String, format : String) : String </td></tr>
<tr><td align="left" balign="left"> + executeConstructQuery(constructQueryString : String, format : String) : String </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + executeConstructQuery(constructQueryString : String) : Model </font></td></tr>
<tr><td align="left" balign="left"> + executeDescribeQuery(describeQueryString : String, format : String) : String </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + executeDescribeQuery(describeQueryString : String) : Model </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + executeAskQuery(askQueryString : String) : boolean </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + executeUpdateQuery(updateQueryString : String) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + executeCreateGraph(graph : String) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + getGraphs() : Iterator&lt;String&gt; </font></td></tr>
		</table></td></tr>
		</table>>, URL="./TripleStoreInterface.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// de.tud.plt.r43ples.triplestoreInterface.VirtuosoInterface
	c6568 [label=<<table title="de.tud.plt.r43ples.triplestoreInterface.VirtuosoInterface" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./VirtuosoInterface.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> VirtuosoInterface </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + VirtuosoInterface(virtuoso_url : String, virtuoso_user : String, virtuoso_password : String) </td></tr>
<tr><td align="left" balign="left"> + close() </td></tr>
<tr><td align="left" balign="left"> + executeSelectQuery(selectQueryString : String) : ResultSet </td></tr>
<tr><td align="left" balign="left"> + executeConstructQuery(constructQueryString : String) : Model </td></tr>
<tr><td align="left" balign="left"> + executeAskQuery(askQueryString : String) : boolean </td></tr>
<tr><td align="left" balign="left"> + executeUpdateQuery(updateQueryString : String) </td></tr>
<tr><td align="left" balign="left"> + executeCreateGraph(graph : String) </td></tr>
<tr><td align="left" balign="left"> + getGraphs() : Iterator&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + executeDescribeQuery(describeQueryString : String) : Model </td></tr>
		</table></td></tr>
		</table>>, URL="./VirtuosoInterface.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	//de.tud.plt.r43ples.triplestoreInterface.VirtuosoInterface extends de.tud.plt.r43ples.triplestoreInterface.TripleStoreInterface
	c6566:p -> c6568:p [dir=back,arrowtail=empty];
	// de.tud.plt.r43ples.triplestoreInterface.VirtuosoInterface NAVASSOC virtuoso.jena.driver.VirtGraph
	c6568:p -> c6633:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// de.tud.plt.r43ples.triplestoreInterface.TripleStoreInterface DEPEND com.hp.hpl.jena.query.ResultSet
	c6566:p -> c6634:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// de.tud.plt.r43ples.triplestoreInterface.TripleStoreInterface DEPEND com.hp.hpl.jena.rdf.model.Model
	c6566:p -> c6635:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// de.tud.plt.r43ples.triplestoreInterface.VirtuosoInterface DEPEND com.hp.hpl.jena.query.ResultSet
	c6568:p -> c6634:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// de.tud.plt.r43ples.triplestoreInterface.VirtuosoInterface DEPEND com.hp.hpl.jena.rdf.model.Model
	c6568:p -> c6635:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// com.hp.hpl.jena.rdf.model.Model
	c6635 [label=<<table title="com.hp.hpl.jena.rdf.model.Model" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="http://java.sun.com/j2se/1.4.2/docs/api/com/hp/hpl/jena/rdf/model/Model.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> Model </td></tr>
<tr><td align="center" balign="center"> com.hp.hpl.jena.rdf.model </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + size() : long </td></tr>
<tr><td align="left" balign="left"> + isEmpty() : boolean </td></tr>
<tr><td align="left" balign="left"> + listSubjects() : com.hp.hpl.jena.rdf.model.ResIterator </td></tr>
<tr><td align="left" balign="left"> + listNameSpaces() : com.hp.hpl.jena.rdf.model.NsIterator </td></tr>
<tr><td align="left" balign="left"> + getResource(arg0 : java.lang.String) : com.hp.hpl.jena.rdf.model.Resource </td></tr>
<tr><td align="left" balign="left"> + getProperty(arg0 : java.lang.String, arg1 : java.lang.String) : com.hp.hpl.jena.rdf.model.Property </td></tr>
<tr><td align="left" balign="left"> + createResource() : com.hp.hpl.jena.rdf.model.Resource </td></tr>
<tr><td align="left" balign="left"> + createResource(arg0 : com.hp.hpl.jena.rdf.model.AnonId) : com.hp.hpl.jena.rdf.model.Resource </td></tr>
<tr><td align="left" balign="left"> + createResource(arg0 : java.lang.String) : com.hp.hpl.jena.rdf.model.Resource </td></tr>
<tr><td align="left" balign="left"> + createProperty(arg0 : java.lang.String, arg1 : java.lang.String) : com.hp.hpl.jena.rdf.model.Property </td></tr>
<tr><td align="left" balign="left"> + createLiteral(arg0 : java.lang.String, arg1 : java.lang.String) : com.hp.hpl.jena.rdf.model.Literal </td></tr>
<tr><td align="left" balign="left"> + createLiteral(arg0 : java.lang.String, arg1 : boolean) : com.hp.hpl.jena.rdf.model.Literal </td></tr>
<tr><td align="left" balign="left"> + createTypedLiteral(arg0 : java.lang.String, arg1 : com.hp.hpl.jena.datatypes.RDFDatatype) : com.hp.hpl.jena.rdf.model.Literal </td></tr>
<tr><td align="left" balign="left"> + createTypedLiteral(arg0 : java.lang.Object, arg1 : com.hp.hpl.jena.datatypes.RDFDatatype) : com.hp.hpl.jena.rdf.model.Literal </td></tr>
<tr><td align="left" balign="left"> + createTypedLiteral(arg0 : java.lang.Object) : com.hp.hpl.jena.rdf.model.Literal </td></tr>
<tr><td align="left" balign="left"> + createStatement(arg0 : com.hp.hpl.jena.rdf.model.Resource, arg1 : com.hp.hpl.jena.rdf.model.Property, arg2 : com.hp.hpl.jena.rdf.model.RDFNode) : com.hp.hpl.jena.rdf.model.Statement </td></tr>
<tr><td align="left" balign="left"> + createList() : com.hp.hpl.jena.rdf.model.RDFList </td></tr>
<tr><td align="left" balign="left"> + createList(arg0 : java.util.Iterator&lt;?&gt;) : com.hp.hpl.jena.rdf.model.RDFList </td></tr>
<tr><td align="left" balign="left"> + createList(arg0 : com.hp.hpl.jena.rdf.model.RDFNode[]) : com.hp.hpl.jena.rdf.model.RDFList </td></tr>
<tr><td align="left" balign="left"> + add(arg0 : com.hp.hpl.jena.rdf.model.Statement) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + add(arg0 : com.hp.hpl.jena.rdf.model.Statement[]) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + remove(arg0 : com.hp.hpl.jena.rdf.model.Statement[]) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + add(arg0 : java.util.List&lt;com.hp.hpl.jena.rdf.model.Statement&gt;) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + remove(arg0 : java.util.List&lt;com.hp.hpl.jena.rdf.model.Statement&gt;) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + add(arg0 : com.hp.hpl.jena.rdf.model.StmtIterator) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + add(arg0 : com.hp.hpl.jena.rdf.model.Model) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + read(arg0 : java.lang.String) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + read(arg0 : java.io.InputStream, arg1 : java.lang.String) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + read(arg0 : java.io.InputStream, arg1 : java.lang.String, arg2 : java.lang.String) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + read(arg0 : java.io.Reader, arg1 : java.lang.String) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + read(arg0 : java.lang.String, arg1 : java.lang.String) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + read(arg0 : java.io.Reader, arg1 : java.lang.String, arg2 : java.lang.String) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + read(arg0 : java.lang.String, arg1 : java.lang.String, arg2 : java.lang.String) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + write(arg0 : java.io.Writer) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + write(arg0 : java.io.Writer, arg1 : java.lang.String) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + write(arg0 : java.io.Writer, arg1 : java.lang.String, arg2 : java.lang.String) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + write(arg0 : java.io.OutputStream) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + write(arg0 : java.io.OutputStream, arg1 : java.lang.String) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + write(arg0 : java.io.OutputStream, arg1 : java.lang.String, arg2 : java.lang.String) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + remove(arg0 : com.hp.hpl.jena.rdf.model.Statement) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + getRequiredProperty(arg0 : com.hp.hpl.jena.rdf.model.Resource, arg1 : com.hp.hpl.jena.rdf.model.Property) : com.hp.hpl.jena.rdf.model.Statement </td></tr>
<tr><td align="left" balign="left"> + getProperty(arg0 : com.hp.hpl.jena.rdf.model.Resource, arg1 : com.hp.hpl.jena.rdf.model.Property) : com.hp.hpl.jena.rdf.model.Statement </td></tr>
<tr><td align="left" balign="left"> + listSubjectsWithProperty(arg0 : com.hp.hpl.jena.rdf.model.Property) : com.hp.hpl.jena.rdf.model.ResIterator </td></tr>
<tr><td align="left" balign="left"> + listResourcesWithProperty(arg0 : com.hp.hpl.jena.rdf.model.Property) : com.hp.hpl.jena.rdf.model.ResIterator </td></tr>
<tr><td align="left" balign="left"> + listSubjectsWithProperty(arg0 : com.hp.hpl.jena.rdf.model.Property, arg1 : com.hp.hpl.jena.rdf.model.RDFNode) : com.hp.hpl.jena.rdf.model.ResIterator </td></tr>
<tr><td align="left" balign="left"> + listResourcesWithProperty(arg0 : com.hp.hpl.jena.rdf.model.Property, arg1 : com.hp.hpl.jena.rdf.model.RDFNode) : com.hp.hpl.jena.rdf.model.ResIterator </td></tr>
<tr><td align="left" balign="left"> + listObjects() : com.hp.hpl.jena.rdf.model.NodeIterator </td></tr>
<tr><td align="left" balign="left"> + listObjectsOfProperty(arg0 : com.hp.hpl.jena.rdf.model.Property) : com.hp.hpl.jena.rdf.model.NodeIterator </td></tr>
<tr><td align="left" balign="left"> + listObjectsOfProperty(arg0 : com.hp.hpl.jena.rdf.model.Resource, arg1 : com.hp.hpl.jena.rdf.model.Property) : com.hp.hpl.jena.rdf.model.NodeIterator </td></tr>
<tr><td align="left" balign="left"> + contains(arg0 : com.hp.hpl.jena.rdf.model.Resource, arg1 : com.hp.hpl.jena.rdf.model.Property) : boolean </td></tr>
<tr><td align="left" balign="left"> + containsResource(arg0 : com.hp.hpl.jena.rdf.model.RDFNode) : boolean </td></tr>
<tr><td align="left" balign="left"> + contains(arg0 : com.hp.hpl.jena.rdf.model.Resource, arg1 : com.hp.hpl.jena.rdf.model.Property, arg2 : com.hp.hpl.jena.rdf.model.RDFNode) : boolean </td></tr>
<tr><td align="left" balign="left"> + contains(arg0 : com.hp.hpl.jena.rdf.model.Statement) : boolean </td></tr>
<tr><td align="left" balign="left"> + containsAny(arg0 : com.hp.hpl.jena.rdf.model.StmtIterator) : boolean </td></tr>
<tr><td align="left" balign="left"> + containsAll(arg0 : com.hp.hpl.jena.rdf.model.StmtIterator) : boolean </td></tr>
<tr><td align="left" balign="left"> + containsAny(arg0 : com.hp.hpl.jena.rdf.model.Model) : boolean </td></tr>
<tr><td align="left" balign="left"> + containsAll(arg0 : com.hp.hpl.jena.rdf.model.Model) : boolean </td></tr>
<tr><td align="left" balign="left"> + isReified(arg0 : com.hp.hpl.jena.rdf.model.Statement) : boolean </td></tr>
<tr><td align="left" balign="left"> + getAnyReifiedStatement(arg0 : com.hp.hpl.jena.rdf.model.Statement) : com.hp.hpl.jena.rdf.model.Resource </td></tr>
<tr><td align="left" balign="left"> + removeAllReifications(arg0 : com.hp.hpl.jena.rdf.model.Statement) </td></tr>
<tr><td align="left" balign="left"> + removeReification(arg0 : com.hp.hpl.jena.rdf.model.ReifiedStatement) </td></tr>
<tr><td align="left" balign="left"> + listStatements() : com.hp.hpl.jena.rdf.model.StmtIterator </td></tr>
<tr><td align="left" balign="left"> + listStatements(arg0 : com.hp.hpl.jena.rdf.model.Selector) : com.hp.hpl.jena.rdf.model.StmtIterator </td></tr>
<tr><td align="left" balign="left"> + listStatements(arg0 : com.hp.hpl.jena.rdf.model.Resource, arg1 : com.hp.hpl.jena.rdf.model.Property, arg2 : com.hp.hpl.jena.rdf.model.RDFNode) : com.hp.hpl.jena.rdf.model.StmtIterator </td></tr>
<tr><td align="left" balign="left"> + createReifiedStatement(arg0 : com.hp.hpl.jena.rdf.model.Statement) : com.hp.hpl.jena.rdf.model.ReifiedStatement </td></tr>
<tr><td align="left" balign="left"> + createReifiedStatement(arg0 : java.lang.String, arg1 : com.hp.hpl.jena.rdf.model.Statement) : com.hp.hpl.jena.rdf.model.ReifiedStatement </td></tr>
<tr><td align="left" balign="left"> + listReifiedStatements() : com.hp.hpl.jena.rdf.model.RSIterator </td></tr>
<tr><td align="left" balign="left"> + listReifiedStatements(arg0 : com.hp.hpl.jena.rdf.model.Statement) : com.hp.hpl.jena.rdf.model.RSIterator </td></tr>
<tr><td align="left" balign="left"> + query(arg0 : com.hp.hpl.jena.rdf.model.Selector) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + union(arg0 : com.hp.hpl.jena.rdf.model.Model) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + intersection(arg0 : com.hp.hpl.jena.rdf.model.Model) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + difference(arg0 : com.hp.hpl.jena.rdf.model.Model) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + equals(arg0 : java.lang.Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + begin() : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + abort() : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + commit() : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + executeInTransaction(arg0 : com.hp.hpl.jena.shared.Command) : java.lang.Object </td></tr>
<tr><td align="left" balign="left"> + independent() : boolean </td></tr>
<tr><td align="left" balign="left"> + supportsTransactions() : boolean </td></tr>
<tr><td align="left" balign="left"> + supportsSetOperations() : boolean </td></tr>
<tr><td align="left" balign="left"> + isIsomorphicWith(arg0 : com.hp.hpl.jena.rdf.model.Model) : boolean </td></tr>
<tr><td align="left" balign="left"> + close() </td></tr>
<tr><td align="left" balign="left"> + getLock() : com.hp.hpl.jena.shared.Lock </td></tr>
<tr><td align="left" balign="left"> + register(arg0 : com.hp.hpl.jena.rdf.model.ModelChangedListener) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + unregister(arg0 : com.hp.hpl.jena.rdf.model.ModelChangedListener) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + notifyEvent(arg0 : java.lang.Object) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + removeAll() : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + removeAll(arg0 : com.hp.hpl.jena.rdf.model.Resource, arg1 : com.hp.hpl.jena.rdf.model.Property, arg2 : com.hp.hpl.jena.rdf.model.RDFNode) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + isClosed() : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="http://java.sun.com/j2se/1.4.2/docs/api/com/hp/hpl/jena/rdf/model/Model.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// com.hp.hpl.jena.query.ResultSet
	c6634 [label=<<table title="com.hp.hpl.jena.query.ResultSet" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="http://java.sun.com/j2se/1.4.2/docs/api/com/hp/hpl/jena/query/ResultSet.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> ResultSet </td></tr>
<tr><td align="center" balign="center"> com.hp.hpl.jena.query </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + hasNext() : boolean </td></tr>
<tr><td align="left" balign="left"> + next() : com.hp.hpl.jena.query.QuerySolution </td></tr>
<tr><td align="left" balign="left"> + nextSolution() : com.hp.hpl.jena.query.QuerySolution </td></tr>
<tr><td align="left" balign="left"> + nextBinding() : com.hp.hpl.jena.sparql.engine.binding.Binding </td></tr>
<tr><td align="left" balign="left"> + getRowNumber() : int </td></tr>
<tr><td align="left" balign="left"> + getResultVars() : java.util.List&lt;java.lang.String&gt; </td></tr>
<tr><td align="left" balign="left"> + getResourceModel() : com.hp.hpl.jena.rdf.model.Model </td></tr>
		</table></td></tr>
		</table>>, URL="http://java.sun.com/j2se/1.4.2/docs/api/com/hp/hpl/jena/query/ResultSet.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// virtuoso.jena.driver.VirtGraph
	c6633 [label=<<table title="virtuoso.jena.driver.VirtGraph" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="http://java.sun.com/j2se/1.4.2/docs/api/virtuoso/jena/driver/VirtGraph.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> VirtGraph </td></tr>
<tr><td align="center" balign="center"> virtuoso.jena.driver </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # S_BATCH_INSERT : java.lang.String </td></tr>
<tr><td align="left" balign="left"> # S_BATCH_DELETE : java.lang.String </td></tr>
<tr><td align="left" balign="left"> # BATCH_SIZE : int </td></tr>
<tr><td align="left" balign="left"> # MAX_CMD_SIZE : int </td></tr>
<tr><td align="left" balign="left"> + DEFAULT : java.lang.String </td></tr>
<tr><td align="left" balign="left"> # isXA : boolean </td></tr>
<tr><td align="left" balign="left"> # graphName : java.lang.String </td></tr>
<tr><td align="left" balign="left"> # readFromAllGraphs : boolean </td></tr>
<tr><td align="left" balign="left"> # url_hostlist : java.lang.String </td></tr>
<tr><td align="left" balign="left"> # user : java.lang.String </td></tr>
<tr><td align="left" balign="left"> # password : java.lang.String </td></tr>
<tr><td align="left" balign="left"> # roundrobin : boolean </td></tr>
<tr><td align="left" balign="left"> # prefetchSize : int </td></tr>
<tr><td align="left" balign="left"> # batchSize : int </td></tr>
<tr><td align="left" balign="left"> # connection : java.sql.Connection </td></tr>
<tr><td align="left" balign="left"> # ruleSet : java.lang.String </td></tr>
<tr><td align="left" balign="left"> # useSameAs : boolean </td></tr>
<tr><td align="left" balign="left"> # queryTimeout : int </td></tr>
<tr><td align="left" balign="left"> # useReprepare : boolean </td></tr>
<tr><td align="left" balign="left"> # sparqlPrefix : java.lang.String </td></tr>
<tr><td align="left" balign="left"> # tranHandler : virtuoso.jena.driver.VirtTransactionHandler </td></tr>
<tr><td align="left" balign="left"> # m_prefixMapping : virtuoso.jena.driver.VirtPrefixMapping </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + VirtGraph() </td></tr>
<tr><td align="left" balign="left"> + VirtGraph(arg0 : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + VirtGraph(arg0 : java.lang.String, arg1 : java.lang.String, arg2 : java.lang.String, arg3 : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + VirtGraph(arg0 : java.lang.String, arg1 : java.lang.String, arg2 : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + VirtGraph(arg0 : java.lang.String, arg1 : javax.sql.DataSource) </td></tr>
<tr><td align="left" balign="left"> + VirtGraph(arg0 : javax.sql.DataSource) </td></tr>
<tr><td align="left" balign="left"> + VirtGraph(arg0 : java.lang.String, arg1 : javax.sql.ConnectionPoolDataSource) </td></tr>
<tr><td align="left" balign="left"> + VirtGraph(arg0 : javax.sql.ConnectionPoolDataSource) </td></tr>
<tr><td align="left" balign="left"> + VirtGraph(arg0 : java.lang.String, arg1 : javax.sql.XADataSource) </td></tr>
<tr><td align="left" balign="left"> + VirtGraph(arg0 : javax.sql.XADataSource) </td></tr>
<tr><td align="left" balign="left"> + VirtGraph(arg0 : java.lang.String, arg1 : java.lang.String, arg2 : java.lang.String, arg3 : java.lang.String, arg4 : boolean) </td></tr>
<tr><td align="left" balign="left"> + getDataSource() : javax.sql.DataSource </td></tr>
<tr><td align="left" balign="left"> + getXAResource() : javax.transaction.xa.XAResource </td></tr>
<tr><td align="left" balign="left"> + getGraphName() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> # setGraphName(arg0 : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + getGraphUrl() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + getGraphUser() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + getGraphPassword() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + getConnection() : java.sql.Connection </td></tr>
<tr><td align="left" balign="left"> + getFetchSize() : int </td></tr>
<tr><td align="left" balign="left"> + setFetchSize(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + getQueryTimeout() : int </td></tr>
<tr><td align="left" balign="left"> + setQueryTimeout(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + getBatchSize() : int </td></tr>
<tr><td align="left" balign="left"> + setBatchSize(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + getSparqlPrefix() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + setSparqlPrefix(arg0 : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + getCount() : int </td></tr>
<tr><td align="left" balign="left"> + remove(arg0 : java.util.List&lt;&gt;) </td></tr>
<tr><td align="left" balign="left"> + remove(arg0 : com.hp.hpl.jena.graph.Triple) </td></tr>
<tr><td align="left" balign="left"> + getReadFromAllGraphs() : boolean </td></tr>
<tr><td align="left" balign="left"> + setReadFromAllGraphs(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + getRuleSet() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + setRuleSet(arg0 : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + getSameAs() : boolean </td></tr>
<tr><td align="left" balign="left"> + setSameAs(arg0 : boolean) </td></tr>
<tr><td align="left" balign="left"> + createRuleSet(arg0 : java.lang.String, arg1 : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + removeRuleSet(arg0 : java.lang.String, arg1 : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> # createStatement() : java.sql.Statement </td></tr>
<tr><td align="left" balign="left"> # prepareStatement(arg0 : java.lang.String) : java.sql.PreparedStatement </td></tr>
<tr><td align="left" balign="left"> # appendSparqlPrefixes(arg0 : java.lang.StringBuilder) </td></tr>
<tr><td align="left" balign="left"> + Node2Str(arg0 : com.hp.hpl.jena.graph.Node) : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + performAdd(arg0 : com.hp.hpl.jena.graph.Triple) </td></tr>
<tr><td align="left" balign="left"> # performAdd(arg0 : java.lang.String, arg1 : com.hp.hpl.jena.graph.Triple) </td></tr>
<tr><td align="left" balign="left"> # performAdd(arg0 : java.lang.String, arg1 : com.hp.hpl.jena.graph.Node, arg2 : com.hp.hpl.jena.graph.Node, arg3 : com.hp.hpl.jena.graph.Node) </td></tr>
<tr><td align="left" balign="left"> + performDelete(arg0 : com.hp.hpl.jena.graph.Triple) </td></tr>
<tr><td align="left" balign="left"> # performDelete(arg0 : java.lang.String, arg1 : com.hp.hpl.jena.graph.Node, arg2 : com.hp.hpl.jena.graph.Node, arg3 : com.hp.hpl.jena.graph.Node) </td></tr>
<tr><td align="left" balign="left"> # graphBaseSize() : int </td></tr>
<tr><td align="left" balign="left"> # graphBaseContains(arg0 : com.hp.hpl.jena.graph.Triple) : boolean </td></tr>
<tr><td align="left" balign="left"> # graphBaseContains(arg0 : java.lang.String, arg1 : com.hp.hpl.jena.graph.Triple) : boolean </td></tr>
<tr><td align="left" balign="left"> + graphBaseFind(arg0 : com.hp.hpl.jena.graph.TripleMatch) : com.hp.hpl.jena.util.iterator.ExtendedIterator&lt;com.hp.hpl.jena.graph.Triple&gt; </td></tr>
<tr><td align="left" balign="left"> # graphBaseFind(arg0 : java.lang.String, arg1 : com.hp.hpl.jena.graph.TripleMatch) : com.hp.hpl.jena.util.iterator.ExtendedIterator&lt;com.hp.hpl.jena.graph.Triple&gt; </td></tr>
<tr><td align="left" balign="left"> + close() </td></tr>
<tr><td align="left" balign="left"> + clear() </td></tr>
<tr><td align="left" balign="left"> + clear(arg0 : com.hp.hpl.jena.graph.Node[]) </td></tr>
<tr><td align="left" balign="left"> + read(arg0 : java.lang.String, arg1 : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> # bindBatchParams(arg0 : java.sql.PreparedStatement, arg1 : com.hp.hpl.jena.graph.Node, arg2 : com.hp.hpl.jena.graph.Node, arg3 : com.hp.hpl.jena.graph.Node, arg4 : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + reifierTriples(arg0 : com.hp.hpl.jena.graph.TripleMatch) : com.hp.hpl.jena.util.iterator.ExtendedIterator&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> + reifierSize() : int </td></tr>
<tr><td align="left" balign="left"> + getTransactionHandler() : virtuoso.jena.driver.VirtTransactionHandler </td></tr>
<tr><td align="left" balign="left"> + getBulkUpdateHandler() : com.hp.hpl.jena.graph.BulkUpdateHandler </td></tr>
<tr><td align="left" balign="left"> + getPrefixMapping() : com.hp.hpl.jena.shared.PrefixMapping </td></tr>
<tr><td align="left" balign="left"> + Object2Node(arg0 : java.lang.Object) : com.hp.hpl.jena.graph.Node </td></tr>
		</table></td></tr>
		</table>>, URL="http://java.sun.com/j2se/1.4.2/docs/api/virtuoso/jena/driver/VirtGraph.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
}

