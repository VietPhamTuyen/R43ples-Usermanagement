#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6-24-gf6e263 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// de.tud.plt.r43ples.merging.SDDTripleStateEnum
	c3745 [label=<<table title="de.tud.plt.r43ples.merging.SDDTripleStateEnum" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../SDDTripleStateEnum.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;enumeration&#187; </td></tr>
<tr><td align="center" balign="center"> SDDTripleStateEnum </td></tr>
<tr><td align="center" balign="center"> de.tud.plt.r43ples.merging </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ADDED </td></tr>
<tr><td align="left" balign="left"> DELETED </td></tr>
<tr><td align="left" balign="left"> ORIGINAL </td></tr>
<tr><td align="left" balign="left"> NOTINCLUDED </td></tr>
		</table></td></tr>
		</table>>, URL="../SDDTripleStateEnum.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// de.tud.plt.r43ples.merging.MergeQueryTypeEnum
	c3749 [label=<<table title="de.tud.plt.r43ples.merging.MergeQueryTypeEnum" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../MergeQueryTypeEnum.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;enumeration&#187; </td></tr>
<tr><td align="center" balign="center"> MergeQueryTypeEnum </td></tr>
<tr><td align="center" balign="center"> de.tud.plt.r43ples.merging </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> AUTO </td></tr>
<tr><td align="left" balign="left"> MANUAL </td></tr>
<tr><td align="left" balign="left"> WITH </td></tr>
<tr><td align="left" balign="left"> COMMON </td></tr>
		</table></td></tr>
		</table>>, URL="../MergeQueryTypeEnum.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// de.tud.plt.r43ples.merging.management.ProcessManagement
	c3757 [label=<<table title="de.tud.plt.r43ples.merging.management.ProcessManagement" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./ProcessManagement.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ProcessManagement </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ProcessManagement() </td></tr>
<tr><td align="left" balign="left"> + createMergeQuery(graphName : String, sdd : String, user : String, commitMessage : String, type : MergeQueryTypeEnum, branchNameA : String, branchNameB : String, triples : String) : String </td></tr>
<tr><td align="left" balign="left"> + readDifferenceModel(differenceModelToRead : String, differenceModel : DifferenceModel, format : String) </td></tr>
<tr><td align="left" balign="left"> + convertSDDStringToSDDTripleState(state : String) : SDDTripleStateEnum </td></tr>
<tr><td align="left" balign="left"> + tripleToString(triple : Triple) : String </td></tr>
<tr><td align="left" balign="left"> + getSubject(triple : Triple) : String </td></tr>
<tr><td align="left" balign="left"> + getPredicate(triple : Triple) : String </td></tr>
<tr><td align="left" balign="left"> + getObject(triple : Triple) : String </td></tr>
<tr><td align="left" balign="left"> + getTriplesOfMergeWithQuery(differenceModel : DifferenceModel) : String </td></tr>
<tr><td align="left" balign="left"> + getAllIndividualsOfRevision(graphName : String, revisionName : String) : ArrayList&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + getAllTriplesOfIndividual(graphName : String, revisionName : String, individualUri : String, differenceModel : DifferenceModel) : HashMap&lt;String, TripleIndividualStructure&gt; </td></tr>
<tr><td align="left" balign="left"> + getDifferenceByTriple(triple : Triple, differenceModel : DifferenceModel) : Difference </td></tr>
<tr><td align="left" balign="left"> + createIndividualModelOfRevision(graphName : String, revisionName : String, differenceModel : DifferenceModel) : IndividualModel </td></tr>
<tr><td align="left" balign="left"> + createIndividualTableList(individualA : String, individualB : String, individualModelBranchA : IndividualModel, individualModelBranchB : IndividualModel, tableModel : TableModel) : List&lt;TableRow&gt; </td></tr>
<tr><td align="left" balign="left"> + createHighLevelChangeRenamingModel(highLevelChangeModel : HighLevelChangeModel, differenceModel : DifferenceModel) </td></tr>
<tr><td align="left" balign="left"> + getAllPrefixesOfDifferenceMap(differenceMap : HashMap&lt;String, Difference&gt;) : HashMap&lt;String, Difference&gt; </td></tr>
<tr><td align="left" balign="left"> + getAllDifferencesByPrefix(prefix : String, differenceMap : HashMap&lt;String, Difference&gt;) : ArrayList&lt;Difference&gt; </td></tr>
<tr><td align="left" balign="left"> + createHighLevelChangeTableModel(highLevelChangeModel : HighLevelChangeModel, highLevelChangeTableModel : HighLevelChangeTableModel) </td></tr>
<tr><td align="left" balign="left"> + createDifferenceTree(differenceModel : DifferenceModel, treeList : List&lt;TreeNode&gt;) </td></tr>
<tr><td align="left" balign="left"> + createTableModel(differenceModel : DifferenceModel, tableModel : TableModel) </td></tr>
<tr><td align="left" balign="left"> + convertTripleStringToPrefixTripleString(tripleString : String) : String </td></tr>
<tr><td align="left" balign="left"> + getPropertiesOfRevision(graphName : String, branchNameA : String, branchNameB : String) : ArrayList&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + getWholeContentOfRevision(graphName : String, revision : String) : Model </td></tr>
<tr><td align="left" balign="left"> + getAllTriplesDividedIntoInsertAndDelete(differenceModel : DifferenceModel, model : Model) : ArrayList&lt;String&gt; </td></tr>
		</table></td></tr>
		</table>>, URL="./ProcessManagement.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// de.tud.plt.r43ples.merging.model.structure.Triple
	c3760 [label=<<table title="de.tud.plt.r43ples.merging.model.structure.Triple" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../model/structure/Triple.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Triple </td></tr>
<tr><td align="center" balign="center"> de.tud.plt.r43ples.merging.model.structure </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Triple(subject : java.lang.String, predicate : java.lang.String, object : java.lang.String, objectType : de.tud.plt.r43ples.merging.TripleObjectTypeEnum) </td></tr>
<tr><td align="left" balign="left"> + getSubject() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + setSubject(subject : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + getPredicate() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + setPredicate(predicate : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + getObject() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + setObject(object : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + getObjectType() : de.tud.plt.r43ples.merging.TripleObjectTypeEnum </td></tr>
<tr><td align="left" balign="left"> + setObjectType(objectType : de.tud.plt.r43ples.merging.TripleObjectTypeEnum) </td></tr>
		</table></td></tr>
		</table>>, URL="../model/structure/Triple.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// de.tud.plt.r43ples.merging.model.structure.TableModel
	c3763 [label=<<table title="de.tud.plt.r43ples.merging.model.structure.TableModel" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../model/structure/TableModel.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> TableModel </td></tr>
<tr><td align="center" balign="center"> de.tud.plt.r43ples.merging.model.structure </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + TableModel() </td></tr>
<tr><td align="left" balign="left"> + readTableRow(tableRow : de.tud.plt.r43ples.merging.model.structure.TableRow) </td></tr>
<tr><td align="left" balign="left"> + getTripleRowList() : java.util.List&lt;de.tud.plt.r43ples.merging.model.structure.TableRow&gt; </td></tr>
<tr><td align="left" balign="left"> + setTripleRowList(tripleRowList : java.util.List&lt;de.tud.plt.r43ples.merging.model.structure.TableRow&gt;) </td></tr>
<tr><td align="left" balign="left"> + getManuellTriple() : java.util.Map&lt;java.lang.String, de.tud.plt.r43ples.merging.model.structure.Triple&gt; </td></tr>
<tr><td align="left" balign="left"> + setManuellTriple(manuellTriple : java.util.HashMap&lt;java.lang.String, de.tud.plt.r43ples.merging.model.structure.Triple&gt;) </td></tr>
<tr><td align="left" balign="left"> + clear() </td></tr>
		</table></td></tr>
		</table>>, URL="../model/structure/TableModel.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// de.tud.plt.r43ples.merging.model.structure.IndividualModel
	c3770 [label=<<table title="de.tud.plt.r43ples.merging.model.structure.IndividualModel" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../model/structure/IndividualModel.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> IndividualModel </td></tr>
<tr><td align="center" balign="center"> de.tud.plt.r43ples.merging.model.structure </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + IndividualModel() </td></tr>
<tr><td align="left" balign="left"> + getIndividualStructures() : java.util.HashMap&lt;java.lang.String, de.tud.plt.r43ples.merging.model.structure.IndividualStructure&gt; </td></tr>
<tr><td align="left" balign="left"> + setIndividualStructures(individualStructures : java.util.HashMap&lt;java.lang.String, de.tud.plt.r43ples.merging.model.structure.IndividualStructure&gt;) </td></tr>
<tr><td align="left" balign="left"> + addIndividualStructure(identifier : java.lang.String, individualStructure : de.tud.plt.r43ples.merging.model.structure.IndividualStructure) </td></tr>
<tr><td align="left" balign="left"> + removeIndividualStructure(identifier : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + clear() </td></tr>
		</table></td></tr>
		</table>>, URL="../model/structure/IndividualModel.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// de.tud.plt.r43ples.merging.model.structure.HighLevelChangeTableModel
	c3772 [label=<<table title="de.tud.plt.r43ples.merging.model.structure.HighLevelChangeTableModel" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../model/structure/HighLevelChangeTableModel.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> HighLevelChangeTableModel </td></tr>
<tr><td align="center" balign="center"> de.tud.plt.r43ples.merging.model.structure </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + HighLevelChangeTableModel() </td></tr>
<tr><td align="left" balign="left"> + readTableRow(tableRow : de.tud.plt.r43ples.merging.model.structure.HighLevelChangeTableRow) </td></tr>
<tr><td align="left" balign="left"> + getTripleRowList() : java.util.List&lt;de.tud.plt.r43ples.merging.model.structure.HighLevelChangeTableRow&gt; </td></tr>
<tr><td align="left" balign="left"> + setTripleRowList(tripleRowList : java.util.List&lt;de.tud.plt.r43ples.merging.model.structure.HighLevelChangeTableRow&gt;) </td></tr>
<tr><td align="left" balign="left"> + getManuellTriple() : java.util.Map&lt;java.lang.String, de.tud.plt.r43ples.merging.model.structure.HighLevelChangeTableRow&gt; </td></tr>
<tr><td align="left" balign="left"> + setManuellTriple(manuellTriple : java.util.HashMap&lt;java.lang.String, de.tud.plt.r43ples.merging.model.structure.HighLevelChangeTableRow&gt;) </td></tr>
<tr><td align="left" balign="left"> + clear() </td></tr>
		</table></td></tr>
		</table>>, URL="../model/structure/HighLevelChangeTableModel.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// de.tud.plt.r43ples.merging.model.structure.HighLevelChangeModel
	c3774 [label=<<table title="de.tud.plt.r43ples.merging.model.structure.HighLevelChangeModel" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../model/structure/HighLevelChangeModel.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> HighLevelChangeModel </td></tr>
<tr><td align="center" balign="center"> de.tud.plt.r43ples.merging.model.structure </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + HighLevelChangeModel() </td></tr>
<tr><td align="left" balign="left"> + getHighLevelChangesRenaming() : java.util.HashMap&lt;java.lang.String, de.tud.plt.r43ples.merging.model.structure.HighLevelChangeRenaming&gt; </td></tr>
<tr><td align="left" balign="left"> + setHighLevelChangesRenaming(highLevelChangesRenaming : java.util.HashMap&lt;java.lang.String, de.tud.plt.r43ples.merging.model.structure.HighLevelChangeRenaming&gt;) </td></tr>
<tr><td align="left" balign="left"> + addHighLevelChangeRenaming(identifier : java.lang.String, highLevelChangeRenaming : de.tud.plt.r43ples.merging.model.structure.HighLevelChangeRenaming) </td></tr>
<tr><td align="left" balign="left"> + removeHighLevelChangeRenaming(identifier : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + clear() </td></tr>
		</table></td></tr>
		</table>>, URL="../model/structure/HighLevelChangeModel.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// de.tud.plt.r43ples.merging.model.structure.DifferenceModel
	c3775 [label=<<table title="de.tud.plt.r43ples.merging.model.structure.DifferenceModel" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../model/structure/DifferenceModel.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> DifferenceModel </td></tr>
<tr><td align="center" balign="center"> de.tud.plt.r43ples.merging.model.structure </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + DifferenceModel() </td></tr>
<tr><td align="left" balign="left"> + getDifferenceGroups() : java.util.HashMap&lt;java.lang.String, de.tud.plt.r43ples.merging.model.structure.DifferenceGroup&gt; </td></tr>
<tr><td align="left" balign="left"> + setDifferenceGroups(differenceGroups : java.util.HashMap&lt;java.lang.String, de.tud.plt.r43ples.merging.model.structure.DifferenceGroup&gt;) </td></tr>
<tr><td align="left" balign="left"> + addDifferenceGroup(identifier : java.lang.String, differenceGroup : de.tud.plt.r43ples.merging.model.structure.DifferenceGroup) </td></tr>
<tr><td align="left" balign="left"> + removeDifferenceGroup(identifier : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + clear() </td></tr>
		</table></td></tr>
		</table>>, URL="../model/structure/DifferenceModel.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// de.tud.plt.r43ples.merging.model.structure.Difference
	c3777 [label=<<table title="de.tud.plt.r43ples.merging.model.structure.Difference" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../model/structure/Difference.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Difference </td></tr>
<tr><td align="center" balign="center"> de.tud.plt.r43ples.merging.model.structure </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Difference(triple : de.tud.plt.r43ples.merging.model.structure.Triple, referencedRevisionA : java.lang.String, referencedRevisionLabelA : java.lang.String, referencedRevisionB : java.lang.String, referencedRevisionLabelB : java.lang.String, tripleResolutionState : de.tud.plt.r43ples.merging.SDDTripleStateEnum, resolutionState : de.tud.plt.r43ples.merging.ResolutionStateEnum) </td></tr>
<tr><td align="left" balign="left"> + getTriple() : de.tud.plt.r43ples.merging.model.structure.Triple </td></tr>
<tr><td align="left" balign="left"> + setTriple(triple : de.tud.plt.r43ples.merging.model.structure.Triple) </td></tr>
<tr><td align="left" balign="left"> + getReferencedRevisionA() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + setReferencedRevisionA(referencedRevisionA : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + getReferencedRevisionLabelA() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + setReferencedRevisionLabelA(referencedRevisionLabelA : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + getReferencedRevisionB() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + setReferencedRevisionB(referencedRevisionB : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + getReferencedRevisionLabelB() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + setReferencedRevisionLabelB(referencedRevisionLabelB : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + getTripleResolutionState() : de.tud.plt.r43ples.merging.SDDTripleStateEnum </td></tr>
<tr><td align="left" balign="left"> + setTripleResolutionState(tripleResolutionState : de.tud.plt.r43ples.merging.SDDTripleStateEnum) </td></tr>
<tr><td align="left" balign="left"> + getResolutionState() : de.tud.plt.r43ples.merging.ResolutionStateEnum </td></tr>
<tr><td align="left" balign="left"> + setResolutionState(resolutionState : de.tud.plt.r43ples.merging.ResolutionStateEnum) </td></tr>
		</table></td></tr>
		</table>>, URL="../model/structure/Difference.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// de.tud.plt.r43ples.merging.model.structure.TableModel NAVASSOC de.tud.plt.r43ples.merging.model.structure.Triple
	c3763:p -> c3760:p [taillabel="", label="", headlabel="*", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// de.tud.plt.r43ples.merging.model.structure.Difference NAVASSOC de.tud.plt.r43ples.merging.model.structure.Triple
	c3777:p -> c3760:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// de.tud.plt.r43ples.merging.model.structure.Difference NAVASSOC de.tud.plt.r43ples.merging.SDDTripleStateEnum
	c3777:p -> c3745:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// de.tud.plt.r43ples.merging.management.ProcessManagement DEPEND de.tud.plt.r43ples.merging.model.structure.Triple
	c3757:p -> c3760:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// de.tud.plt.r43ples.merging.management.ProcessManagement DEPEND de.tud.plt.r43ples.merging.model.structure.Difference
	c3757:p -> c3777:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// de.tud.plt.r43ples.merging.management.ProcessManagement DEPEND de.tud.plt.r43ples.merging.model.structure.IndividualModel
	c3757:p -> c3770:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// de.tud.plt.r43ples.merging.management.ProcessManagement DEPEND de.tud.plt.r43ples.merging.SDDTripleStateEnum
	c3757:p -> c3745:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// de.tud.plt.r43ples.merging.management.ProcessManagement DEPEND de.tud.plt.r43ples.merging.MergeQueryTypeEnum
	c3757:p -> c3749:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// de.tud.plt.r43ples.merging.management.ProcessManagement DEPEND de.tud.plt.r43ples.merging.model.structure.DifferenceModel
	c3757:p -> c3775:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// de.tud.plt.r43ples.merging.management.ProcessManagement DEPEND de.tud.plt.r43ples.merging.model.structure.TableModel
	c3757:p -> c3763:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// de.tud.plt.r43ples.merging.management.ProcessManagement DEPEND com.hp.hpl.jena.rdf.model.Model
	c3757:p -> c3799:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// de.tud.plt.r43ples.merging.management.ProcessManagement DEPEND de.tud.plt.r43ples.merging.model.structure.HighLevelChangeModel
	c3757:p -> c3774:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// de.tud.plt.r43ples.merging.management.ProcessManagement DEPEND de.tud.plt.r43ples.merging.model.structure.HighLevelChangeTableModel
	c3757:p -> c3772:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// de.tud.plt.r43ples.merging.model.structure.Difference DEPEND de.tud.plt.r43ples.merging.SDDTripleStateEnum
	c3777:p -> c3745:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// com.hp.hpl.jena.rdf.model.Model
	c3799 [label=<<table title="com.hp.hpl.jena.rdf.model.Model" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="http://java.sun.com/j2se/1.4.2/docs/api/com/hp/hpl/jena/rdf/model/Model.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> Model </td></tr>
<tr><td align="center" balign="center"> com.hp.hpl.jena.rdf.model </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + size() : long </td></tr>
<tr><td align="left" balign="left"> + isEmpty() : boolean </td></tr>
<tr><td align="left" balign="left"> + listSubjects() : com.hp.hpl.jena.rdf.model.ResIterator </td></tr>
<tr><td align="left" balign="left"> + listNameSpaces() : com.hp.hpl.jena.rdf.model.NsIterator </td></tr>
<tr><td align="left" balign="left"> + getResource(arg0 : java.lang.String) : com.hp.hpl.jena.rdf.model.Resource </td></tr>
<tr><td align="left" balign="left"> + getProperty(arg0 : java.lang.String, arg1 : java.lang.String) : com.hp.hpl.jena.rdf.model.Property </td></tr>
<tr><td align="left" balign="left"> + createResource() : com.hp.hpl.jena.rdf.model.Resource </td></tr>
<tr><td align="left" balign="left"> + createResource(arg0 : com.hp.hpl.jena.rdf.model.AnonId) : com.hp.hpl.jena.rdf.model.Resource </td></tr>
<tr><td align="left" balign="left"> + createResource(arg0 : java.lang.String) : com.hp.hpl.jena.rdf.model.Resource </td></tr>
<tr><td align="left" balign="left"> + createProperty(arg0 : java.lang.String, arg1 : java.lang.String) : com.hp.hpl.jena.rdf.model.Property </td></tr>
<tr><td align="left" balign="left"> + createLiteral(arg0 : java.lang.String, arg1 : java.lang.String) : com.hp.hpl.jena.rdf.model.Literal </td></tr>
<tr><td align="left" balign="left"> + createLiteral(arg0 : java.lang.String, arg1 : boolean) : com.hp.hpl.jena.rdf.model.Literal </td></tr>
<tr><td align="left" balign="left"> + createTypedLiteral(arg0 : java.lang.String, arg1 : com.hp.hpl.jena.datatypes.RDFDatatype) : com.hp.hpl.jena.rdf.model.Literal </td></tr>
<tr><td align="left" balign="left"> + createTypedLiteral(arg0 : java.lang.Object, arg1 : com.hp.hpl.jena.datatypes.RDFDatatype) : com.hp.hpl.jena.rdf.model.Literal </td></tr>
<tr><td align="left" balign="left"> + createTypedLiteral(arg0 : java.lang.Object) : com.hp.hpl.jena.rdf.model.Literal </td></tr>
<tr><td align="left" balign="left"> + createStatement(arg0 : com.hp.hpl.jena.rdf.model.Resource, arg1 : com.hp.hpl.jena.rdf.model.Property, arg2 : com.hp.hpl.jena.rdf.model.RDFNode) : com.hp.hpl.jena.rdf.model.Statement </td></tr>
<tr><td align="left" balign="left"> + createList() : com.hp.hpl.jena.rdf.model.RDFList </td></tr>
<tr><td align="left" balign="left"> + createList(arg0 : java.util.Iterator&lt;?&gt;) : com.hp.hpl.jena.rdf.model.RDFList </td></tr>
<tr><td align="left" balign="left"> + createList(arg0 : com.hp.hpl.jena.rdf.model.RDFNode[]) : com.hp.hpl.jena.rdf.model.RDFList </td></tr>
<tr><td align="left" balign="left"> + add(arg0 : com.hp.hpl.jena.rdf.model.Statement) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + add(arg0 : com.hp.hpl.jena.rdf.model.Statement[]) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + remove(arg0 : com.hp.hpl.jena.rdf.model.Statement[]) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + add(arg0 : java.util.List&lt;com.hp.hpl.jena.rdf.model.Statement&gt;) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + remove(arg0 : java.util.List&lt;com.hp.hpl.jena.rdf.model.Statement&gt;) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + add(arg0 : com.hp.hpl.jena.rdf.model.StmtIterator) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + add(arg0 : com.hp.hpl.jena.rdf.model.Model) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + read(arg0 : java.lang.String) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + read(arg0 : java.io.InputStream, arg1 : java.lang.String) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + read(arg0 : java.io.InputStream, arg1 : java.lang.String, arg2 : java.lang.String) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + read(arg0 : java.io.Reader, arg1 : java.lang.String) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + read(arg0 : java.lang.String, arg1 : java.lang.String) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + read(arg0 : java.io.Reader, arg1 : java.lang.String, arg2 : java.lang.String) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + read(arg0 : java.lang.String, arg1 : java.lang.String, arg2 : java.lang.String) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + write(arg0 : java.io.Writer) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + write(arg0 : java.io.Writer, arg1 : java.lang.String) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + write(arg0 : java.io.Writer, arg1 : java.lang.String, arg2 : java.lang.String) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + write(arg0 : java.io.OutputStream) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + write(arg0 : java.io.OutputStream, arg1 : java.lang.String) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + write(arg0 : java.io.OutputStream, arg1 : java.lang.String, arg2 : java.lang.String) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + remove(arg0 : com.hp.hpl.jena.rdf.model.Statement) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + getRequiredProperty(arg0 : com.hp.hpl.jena.rdf.model.Resource, arg1 : com.hp.hpl.jena.rdf.model.Property) : com.hp.hpl.jena.rdf.model.Statement </td></tr>
<tr><td align="left" balign="left"> + getProperty(arg0 : com.hp.hpl.jena.rdf.model.Resource, arg1 : com.hp.hpl.jena.rdf.model.Property) : com.hp.hpl.jena.rdf.model.Statement </td></tr>
<tr><td align="left" balign="left"> + listSubjectsWithProperty(arg0 : com.hp.hpl.jena.rdf.model.Property) : com.hp.hpl.jena.rdf.model.ResIterator </td></tr>
<tr><td align="left" balign="left"> + listResourcesWithProperty(arg0 : com.hp.hpl.jena.rdf.model.Property) : com.hp.hpl.jena.rdf.model.ResIterator </td></tr>
<tr><td align="left" balign="left"> + listSubjectsWithProperty(arg0 : com.hp.hpl.jena.rdf.model.Property, arg1 : com.hp.hpl.jena.rdf.model.RDFNode) : com.hp.hpl.jena.rdf.model.ResIterator </td></tr>
<tr><td align="left" balign="left"> + listResourcesWithProperty(arg0 : com.hp.hpl.jena.rdf.model.Property, arg1 : com.hp.hpl.jena.rdf.model.RDFNode) : com.hp.hpl.jena.rdf.model.ResIterator </td></tr>
<tr><td align="left" balign="left"> + listObjects() : com.hp.hpl.jena.rdf.model.NodeIterator </td></tr>
<tr><td align="left" balign="left"> + listObjectsOfProperty(arg0 : com.hp.hpl.jena.rdf.model.Property) : com.hp.hpl.jena.rdf.model.NodeIterator </td></tr>
<tr><td align="left" balign="left"> + listObjectsOfProperty(arg0 : com.hp.hpl.jena.rdf.model.Resource, arg1 : com.hp.hpl.jena.rdf.model.Property) : com.hp.hpl.jena.rdf.model.NodeIterator </td></tr>
<tr><td align="left" balign="left"> + contains(arg0 : com.hp.hpl.jena.rdf.model.Resource, arg1 : com.hp.hpl.jena.rdf.model.Property) : boolean </td></tr>
<tr><td align="left" balign="left"> + containsResource(arg0 : com.hp.hpl.jena.rdf.model.RDFNode) : boolean </td></tr>
<tr><td align="left" balign="left"> + contains(arg0 : com.hp.hpl.jena.rdf.model.Resource, arg1 : com.hp.hpl.jena.rdf.model.Property, arg2 : com.hp.hpl.jena.rdf.model.RDFNode) : boolean </td></tr>
<tr><td align="left" balign="left"> + contains(arg0 : com.hp.hpl.jena.rdf.model.Statement) : boolean </td></tr>
<tr><td align="left" balign="left"> + containsAny(arg0 : com.hp.hpl.jena.rdf.model.StmtIterator) : boolean </td></tr>
<tr><td align="left" balign="left"> + containsAll(arg0 : com.hp.hpl.jena.rdf.model.StmtIterator) : boolean </td></tr>
<tr><td align="left" balign="left"> + containsAny(arg0 : com.hp.hpl.jena.rdf.model.Model) : boolean </td></tr>
<tr><td align="left" balign="left"> + containsAll(arg0 : com.hp.hpl.jena.rdf.model.Model) : boolean </td></tr>
<tr><td align="left" balign="left"> + isReified(arg0 : com.hp.hpl.jena.rdf.model.Statement) : boolean </td></tr>
<tr><td align="left" balign="left"> + getAnyReifiedStatement(arg0 : com.hp.hpl.jena.rdf.model.Statement) : com.hp.hpl.jena.rdf.model.Resource </td></tr>
<tr><td align="left" balign="left"> + removeAllReifications(arg0 : com.hp.hpl.jena.rdf.model.Statement) </td></tr>
<tr><td align="left" balign="left"> + removeReification(arg0 : com.hp.hpl.jena.rdf.model.ReifiedStatement) </td></tr>
<tr><td align="left" balign="left"> + listStatements() : com.hp.hpl.jena.rdf.model.StmtIterator </td></tr>
<tr><td align="left" balign="left"> + listStatements(arg0 : com.hp.hpl.jena.rdf.model.Selector) : com.hp.hpl.jena.rdf.model.StmtIterator </td></tr>
<tr><td align="left" balign="left"> + listStatements(arg0 : com.hp.hpl.jena.rdf.model.Resource, arg1 : com.hp.hpl.jena.rdf.model.Property, arg2 : com.hp.hpl.jena.rdf.model.RDFNode) : com.hp.hpl.jena.rdf.model.StmtIterator </td></tr>
<tr><td align="left" balign="left"> + createReifiedStatement(arg0 : com.hp.hpl.jena.rdf.model.Statement) : com.hp.hpl.jena.rdf.model.ReifiedStatement </td></tr>
<tr><td align="left" balign="left"> + createReifiedStatement(arg0 : java.lang.String, arg1 : com.hp.hpl.jena.rdf.model.Statement) : com.hp.hpl.jena.rdf.model.ReifiedStatement </td></tr>
<tr><td align="left" balign="left"> + listReifiedStatements() : com.hp.hpl.jena.rdf.model.RSIterator </td></tr>
<tr><td align="left" balign="left"> + listReifiedStatements(arg0 : com.hp.hpl.jena.rdf.model.Statement) : com.hp.hpl.jena.rdf.model.RSIterator </td></tr>
<tr><td align="left" balign="left"> + query(arg0 : com.hp.hpl.jena.rdf.model.Selector) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + union(arg0 : com.hp.hpl.jena.rdf.model.Model) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + intersection(arg0 : com.hp.hpl.jena.rdf.model.Model) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + difference(arg0 : com.hp.hpl.jena.rdf.model.Model) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + equals(arg0 : java.lang.Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + begin() : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + abort() : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + commit() : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + executeInTransaction(arg0 : com.hp.hpl.jena.shared.Command) : java.lang.Object </td></tr>
<tr><td align="left" balign="left"> + independent() : boolean </td></tr>
<tr><td align="left" balign="left"> + supportsTransactions() : boolean </td></tr>
<tr><td align="left" balign="left"> + supportsSetOperations() : boolean </td></tr>
<tr><td align="left" balign="left"> + isIsomorphicWith(arg0 : com.hp.hpl.jena.rdf.model.Model) : boolean </td></tr>
<tr><td align="left" balign="left"> + close() </td></tr>
<tr><td align="left" balign="left"> + getLock() : com.hp.hpl.jena.shared.Lock </td></tr>
<tr><td align="left" balign="left"> + register(arg0 : com.hp.hpl.jena.rdf.model.ModelChangedListener) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + unregister(arg0 : com.hp.hpl.jena.rdf.model.ModelChangedListener) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + notifyEvent(arg0 : java.lang.Object) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + removeAll() : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + removeAll(arg0 : com.hp.hpl.jena.rdf.model.Resource, arg1 : com.hp.hpl.jena.rdf.model.Property, arg2 : com.hp.hpl.jena.rdf.model.RDFNode) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + isClosed() : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="http://java.sun.com/j2se/1.4.2/docs/api/com/hp/hpl/jena/rdf/model/Model.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
}

