#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6-24-gf6e263 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// de.tud.plt.r43ples.management.MergeManagement
	c3493 [label=<<table title="de.tud.plt.r43ples.management.MergeManagement" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../management/MergeManagement.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> MergeManagement </td></tr>
<tr><td align="center" balign="center"> de.tud.plt.r43ples.management </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + MergeManagement() </td></tr>
<tr><td align="left" balign="left"> + getCommonRevisionWithShortestPath(revision1 : java.lang.String, revision2 : java.lang.String) : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + getPathBetweenStartAndTargetRevision(startRevision : java.lang.String, targetRevision : java.lang.String) : java.util.LinkedList&lt;java.lang.String&gt; </td></tr>
<tr><td align="left" balign="left"> + createRevisionProgresses(listA : java.util.LinkedList&lt;java.lang.String&gt;, graphNameRevisionProgressA : java.lang.String, uriA : java.lang.String, listB : java.util.LinkedList&lt;java.lang.String&gt;, graphNameRevisionProgressB : java.lang.String, uriB : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + createRevisionProgress(list : java.util.LinkedList&lt;java.lang.String&gt;, fullGraphNameCommonRevision : java.lang.String, graphNameRevisionProgress : java.lang.String, uri : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + createDifferenceTripleModel(graphName : java.lang.String, graphNameDifferenceTripleModel : java.lang.String, graphNameRevisionProgressA : java.lang.String, uriA : java.lang.String, graphNameRevisionProgressB : java.lang.String, uriB : java.lang.String, uriSDD : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + createMergedRevision(graphName : java.lang.String, branchNameA : java.lang.String, branchNameB : java.lang.String, user : java.lang.String, commitMessage : java.lang.String, graphNameDifferenceTripleModel : java.lang.String, graphNameRevisionProgressA : java.lang.String, uriA : java.lang.String, graphNameRevisionProgressB : java.lang.String, uriB : java.lang.String, uriSDD : java.lang.String, type : de.tud.plt.r43ples.merge.MergeQueryTypeEnum, triples : java.lang.String) : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + createRebaseMergedTripleList(graphName : java.lang.String, branchNameA : java.lang.String, branchNameB : java.lang.String, user : java.lang.String, commitMessage : java.lang.String, graphNameDifferenceTripleModel : java.lang.String, graphNameRevisionProgressA : java.lang.String, uriA : java.lang.String, graphNameRevisionProgressB : java.lang.String, uriB : java.lang.String, uriSDD : java.lang.String, type : de.tud.plt.r43ples.management.RebaseQueryTypeEnum, triples : java.lang.String) : java.util.ArrayList&lt;java.lang.String&gt; </td></tr>
		</table></td></tr>
		</table>>, URL="../management/MergeManagement.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// de.tud.plt.r43ples.merge.MergeQueryTypeEnum
	c3496 [label=<<table title="de.tud.plt.r43ples.merge.MergeQueryTypeEnum" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./MergeQueryTypeEnum.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;enumeration&#187; </td></tr>
<tr><td align="center" balign="center"> MergeQueryTypeEnum </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> AUTO </td></tr>
<tr><td align="left" balign="left"> MANUAL </td></tr>
<tr><td align="left" balign="left"> WITH </td></tr>
<tr><td align="left" balign="left"> COMMON </td></tr>
		</table></td></tr>
		</table>>, URL="./MergeQueryTypeEnum.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// de.tud.plt.r43ples.merging.management.ProcessManagement
	c3527 [label=<<table title="de.tud.plt.r43ples.merging.management.ProcessManagement" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../merging/management/ProcessManagement.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ProcessManagement </td></tr>
<tr><td align="center" balign="center"> de.tud.plt.r43ples.merging.management </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ProcessManagement() </td></tr>
<tr><td align="left" balign="left"> + createMergeQuery(graphName : java.lang.String, sdd : java.lang.String, user : java.lang.String, commitMessage : java.lang.String, type : de.tud.plt.r43ples.merge.MergeQueryTypeEnum, branchNameA : java.lang.String, branchNameB : java.lang.String, triples : java.lang.String) : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + readDifferenceModel(differenceModelToRead : java.lang.String, differenceModel : de.tud.plt.r43ples.merging.model.structure.DifferenceModel, format : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + readTurtleStringToJenaModel(triples : java.lang.String, format : java.lang.String) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + writeJenaModelToNTriplesString(model : com.hp.hpl.jena.rdf.model.Model) : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + convertSDDStringToSDDTripleState(state : java.lang.String) : de.tud.plt.r43ples.management.SDDTripleStateEnum </td></tr>
<tr><td align="left" balign="left"> + tripleToString(triple : de.tud.plt.r43ples.merging.model.structure.Triple) : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + getSubject(triple : de.tud.plt.r43ples.merging.model.structure.Triple) : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + getPredicate(triple : de.tud.plt.r43ples.merging.model.structure.Triple) : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + getObject(triple : de.tud.plt.r43ples.merging.model.structure.Triple) : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + getTriplesOfMergeWithQuery(differenceModel : de.tud.plt.r43ples.merging.model.structure.DifferenceModel) : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + getAllIndividualsOfRevision(graphName : java.lang.String, revisionName : java.lang.String) : java.util.ArrayList&lt;java.lang.String&gt; </td></tr>
<tr><td align="left" balign="left"> + getAllTriplesOfIndividual(graphName : java.lang.String, revisionName : java.lang.String, individualUri : java.lang.String, differenceModel : de.tud.plt.r43ples.merging.model.structure.DifferenceModel) : java.util.HashMap&lt;java.lang.String, de.tud.plt.r43ples.merging.model.structure.TripleIndividualStructure&gt; </td></tr>
<tr><td align="left" balign="left"> + getDifferenceByTriple(triple : de.tud.plt.r43ples.merging.model.structure.Triple, differenceModel : de.tud.plt.r43ples.merging.model.structure.DifferenceModel) : de.tud.plt.r43ples.merging.model.structure.Difference </td></tr>
<tr><td align="left" balign="left"> + createIndividualModelOfRevision(graphName : java.lang.String, revisionName : java.lang.String, differenceModel : de.tud.plt.r43ples.merging.model.structure.DifferenceModel) : de.tud.plt.r43ples.merging.model.structure.IndividualModel </td></tr>
<tr><td align="left" balign="left"> + createIndividualTableList(individualA : java.lang.String, individualB : java.lang.String, individualModelBranchA : de.tud.plt.r43ples.merging.model.structure.IndividualModel, individualModelBranchB : de.tud.plt.r43ples.merging.model.structure.IndividualModel, tableModel : de.tud.plt.r43ples.merging.model.structure.TableModel) : java.util.List&lt;de.tud.plt.r43ples.merging.model.structure.TableRow&gt; </td></tr>
<tr><td align="left" balign="left"> + createHighLevelChangeRenamingModel(highLevelChangeModel : de.tud.plt.r43ples.merging.model.structure.HighLevelChangeModel, differenceModel : de.tud.plt.r43ples.merging.model.structure.DifferenceModel) </td></tr>
<tr><td align="left" balign="left"> + getAllPrefixesOfDifferenceMap(differenceMap : java.util.HashMap&lt;java.lang.String, de.tud.plt.r43ples.merging.model.structure.Difference&gt;) : java.util.HashMap&lt;java.lang.String, de.tud.plt.r43ples.merging.model.structure.Difference&gt; </td></tr>
<tr><td align="left" balign="left"> + getAllDifferencesByPrefix(prefix : java.lang.String, differenceMap : java.util.HashMap&lt;java.lang.String, de.tud.plt.r43ples.merging.model.structure.Difference&gt;) : java.util.ArrayList&lt;de.tud.plt.r43ples.merging.model.structure.Difference&gt; </td></tr>
<tr><td align="left" balign="left"> + createHighLevelChangeTableModel(highLevelChangeModel : de.tud.plt.r43ples.merging.model.structure.HighLevelChangeModel, highLevelChangeTableModel : de.tud.plt.r43ples.merging.model.structure.HighLevelChangeTableModel) </td></tr>
<tr><td align="left" balign="left"> + createDifferenceTree(differenceModel : de.tud.plt.r43ples.merging.model.structure.DifferenceModel, treeList : java.util.List&lt;de.tud.plt.r43ples.merging.model.structure.TreeNode&gt;) </td></tr>
<tr><td align="left" balign="left"> + createTableModel(differenceModel : de.tud.plt.r43ples.merging.model.structure.DifferenceModel, tableModel : de.tud.plt.r43ples.merging.model.structure.TableModel) </td></tr>
<tr><td align="left" balign="left"> + convertTripleStringToPrefixTripleString(tripleString : java.lang.String) : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + getPropertiesOfRevision(graphName : java.lang.String, branchNameA : java.lang.String, branchNameB : java.lang.String) : java.util.ArrayList&lt;java.lang.String&gt; </td></tr>
<tr><td align="left" balign="left"> + getWholeContentOfRevision(graphName : java.lang.String, revision : java.lang.String) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + getAllTriplesDividedIntoInsertAndDelete(differenceModel : de.tud.plt.r43ples.merging.model.structure.DifferenceModel, model : com.hp.hpl.jena.rdf.model.Model) : java.util.ArrayList&lt;java.lang.String&gt; </td></tr>
		</table></td></tr>
		</table>>, URL="../merging/management/ProcessManagement.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// de.tud.plt.r43ples.management.MergeManagement DEPEND de.tud.plt.r43ples.merge.MergeQueryTypeEnum
	c3493:p -> c3496:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// de.tud.plt.r43ples.merging.management.ProcessManagement DEPEND de.tud.plt.r43ples.merge.MergeQueryTypeEnum
	c3527:p -> c3496:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
}

