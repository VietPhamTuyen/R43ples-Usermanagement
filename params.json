{"name":"R43ples","tagline":"Revision Management for the Semantic Web","body":"R43ples\r\n=======\r\n\r\nR43ples (Revision for triples) is Revision Management Tool for the Semantic Web.\r\n\r\nIt is based on storing the differences of revisions of graphs in additional Named Graphs which are then referenced in a revision graph. It provides an extended SPARQL interface which offers the possibility specify revision of named graphs which should be used for answering the query.\r\n\r\n[![Build Status](https://travis-ci.org/plt-tud/r43ples.png?branch=master)](https://travis-ci.org/plt-tud/r43ples)\r\n[![Coverity Scan Build Status](https://scan.coverity.com/projects/2125/badge.svg)](https://scan.coverity.com/projects/2125)\r\n[![Ohloh Project Status](https://www.ohloh.net/p/r43ples/widgets/project_thin_badge.gif)](https://www.ohloh.net/p/r43ples)\r\n\r\n\r\nThis project provides a service for revision management of named graphs in a triple store.\r\nThe service can be interconnected in front of an existing SPARQL endpoint of a Triple Store. \r\nThis service in the associated Triple Store creates and manages a revision management of graphs. \r\nIt provides a SPARQL endpoint where all queries have to be directed to. \r\nThe SPARQL query defines whether only a revision is queried, or a new revision needs to be created. \r\nFurthermore, the service provides an interface for revision management and the import or export of data from the Computer Aided Engineering tools.\r\n\r\nThe javdoc can be found at [http://plt-tud.github.io/r43ples/javadoc/](http://plt-tud.github.io/r43ples/javadoc/).\r\n\r\n\r\nDependencies\r\n------------\r\n* JDK 1.7\r\n* Running Triplestore with SPARQL 1.1 endpoint (tested with Virtuoso 7)\r\n\r\n\r\nStarting\r\n--------\r\nAnt is used for compiling and starting\r\n\r\n    ant run\r\n\r\n\r\nInterfaces\r\n---------\r\nSPARQL endpoint is available at:\r\n\r\n\t[uri]:[port]/r43ples/sparql\r\n\r\nIt directly accepts SPARQL queries with HTTP GET parameters for **query** and **format**: \r\n\r\n    [uri]:[port]/r43ples/sparql?query=[]&format=(HTML|JSON)\r\n\r\n\r\nThere is a command line admin interface which can be started separately. However, it is deprecated and will be removed in the future.\r\n\r\n\r\nConfiguration\r\n-------------\r\nThere is a configuration file named *resources/r43ples.conf* where all parameters are configured.\r\n* *sparql.endpoint* - SPARQL endpoint of triplestore which stores all information\r\n* *sparql.username* - username for connected SPARQL endpoint allowed to write data\r\n* *sparql.password* - password for specified user\r\n* *revision.graph* - named graph which is used by R43plesto store revision graph information\r\n* *service.port* - port under which R43ples provides its services\r\n* *service.uri* - URI under which R43ples provides its services\r\n\r\nThe logging configuration is stored in **resources/log4j.properties**\r\n\r\nSPARQL Interface\r\n----------------\r\n* Create graph\r\n\r\n\t\tCREATE GRAPH <graph>\r\n\t\t\r\n* Select query\r\n\r\n\t\tSELECT * FROM <graph> REVISION \"23\" WHERE {?s ?p ?o}\r\n\t\t\r\n* Update query\r\n\r\n\t\tUSER \"mgraube\" MESSAGE \"test commit\" \r\n\t\tINSERT {\r\n\t\t    GRAPH <test> REVISION \"2\" {\r\n\t\t        <a> <b> <c> .\r\n\t\t    }\r\n\t\t}\r\n\r\n* Branching\r\n\r\n\t\tUSER \"mgraube\"\r\n\t\tMESSAGE \"test commit\"\r\n\t\tBRANCH GRAPH <test> REVISION \"2\" TO \"unstable\"\r\n\t\t\r\n* Tagging\r\n\r\n\t\tUSER \"mgraube\"\r\n\t\tMESSAGE \"test commit\"\r\n\t\tTAG GRAPH <test> REVISION \"2\" TO \"v0.3-alpha\"\r\n\r\n\r\nSPARQL Join option\r\n------------------\r\nThere is a new option for R43ples which improves the performance. The necessary revision is not temporarily generated anymore.\r\nThe SPARQL query is rewritten in such a way that the branch and the change sets are directly joined inside the query. This includes the order of the change sets.\r\nIt is currently under development und further research. The option can be enabled by\r\n```\r\n#OPTION r43ples:SPARQL_JOIN\r\n```\r\n\r\nFor details, have a look into the **doc** directory.\r\n\r\nIt currently supports:\r\n* Multiple Graphs\r\n* Multiple TriplePath\r\n* FILTER\r\n* MINUS\r\n\r\n\r\nAlgorithm\r\n-----------\r\nWithout SPARQL Join option the algorithm are like the following\r\n```\r\nFor each named graph 'g' in a query, a temporary graph 'TempGraph_g_r' is generated for the specified revision 'r' according to this formula ('g_x' = full materialized revision 'x' of graph 'g'):\r\n    TempGraph_g_r = g_nearestBranch + SUM[revision i= nearestBranch to r]( deleteSet_g_i - addSet_g_i )\r\n```\r\n\r\n```\r\ndef select_query(query_string):\r\n    for (graph,revision) in query_string.get_named_graphs_and_revisions():   \r\n        execQuery(\"COPY GRAPH <\"+graph+\"> TO GRAPH <tmp-\"+graph+\"-\"+revision+\">\")\r\n        for rev in graph.find_shortest_path_to_revision(revision):\r\n            execQuery(\"REMOVE GRAPH \"+ rev.add_set_graph+\" FROM GRAPH <tmp-\"+graph+\"-\"+revision+\">\")\r\n            execQuery(\"ADD GRAPH \"+ rev.delete_set_graph+\" TO GRAPH <tmp-\"+graph+\"-\"+revision+\">\")\r\n        query_string.replace(graph, \"tmp-\"+graph+\"-\"+revision)\r\n    result = execQuery(query_string)\r\n    execQuery(\"DROP GRAPH <tmp-*>\")\r\n    return result\r\n```\r\n  \r\n``` \r\ndef update_query(query_string):\r\n    for (graph,revision) in query_string.get_named_graphs_and_revisions():\r\n        newRevision = revision +1\r\n        execQuery(\"ADD GRAPH \"+ rev.delete_set_graph+\" TO GRAPH <tmp-\"+graph+\"-\"+revision+\">\")\r\n        ...\r\n```\r\n    \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}