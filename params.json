{"name":"R43ples","tagline":"Revision Management for the Semantic Web","body":"R43ples\r\n=======\r\n\r\nR43ples (Revision for triples) is Revision Management Tool for the Semantic Web.\r\n\r\nIt is based on storing the differences of revisions of graphs in additional Named Graphs which are then referenced in a revision graph.\r\n\r\n[![Build Status](https://travis-ci.org/plt-tud/r43ples.png?branch=master)](https://travis-ci.org/plt-tud/r43ples)\r\n[![Coverity Scan Build Status](https://scan.coverity.com/projects/2125/badge.svg)](https://scan.coverity.com/projects/2125)\r\n\r\n\r\nThis project provides a service for revision management of named graphs in a triple store.\r\nThe service can be interconnected in front of an existing SPARQL endpoint of a Triple Store. \r\nThis service in the associated Triple Store creates and manages a revision management of graphs. \r\nIt provides a SPARQL endpoint where all queries have to be directed to. \r\nThe SPARQL query defines whether only a revision is queried, or a new revision needs to be created. \r\nFurthermore, the service provides an interface for revision management and the import or export of data from the Computer Aided Engineering tools.\r\n\r\nStarting\r\n--------\r\nAnt is used for compiling and starting\r\n\r\n    ant run\r\n\r\n\r\nSPARQL\r\n------\r\nSPARQL endpoint is available at:\r\n\r\n    [uri]:[port]/r43ples/sparql?query=[]&format=(HTML|JSON)\r\n\r\nA HTML page is available under\r\n\r\n    [uri]:[port]/r43ples\r\n\r\n\r\nAdmin Interface\r\n---------------\r\nThere is a command line admin interface which can be started separatly.\r\n\r\n\r\nThere is a configuration file named Service.conf where all parameters are configured.\r\n\r\n\r\nDirectory structure\r\n-------------------\r\n* javadoc - Javadoc of the service (generated by 'ant javadoc')\r\n* lib - used libs\r\n* resources - contains configuration files\r\n* src - source code\r\n* verification - HTML page which executes SPARQL queries\r\n\r\n\r\n\r\nJMeter\r\n------\r\n    jmeter -Jsample_variables=dataset,revision &\r\n\r\n\r\n\r\nAlgorithm\r\n-----------\r\n```\r\nFor each named graph 'g' in a query, a temporary graph 'TempGraph_g_r' is generated for the specified revision 'r' according to this formula ('g_x' = full materialized revision 'x' of graph 'g'):\r\n    TempGraph_g_r = g_nearestBranch + SUM[revision i= nearestBranch to r]( deleteSet_g_i - addSet_g_i )\r\n```\r\n\r\n```\r\ndef select_query(query_string):\r\n    for (graph,revision) in query_string.get_named_graphs_and_revisions():   \r\n        execQuery(\"COPY GRAPH <\"+graph+\"> TO GRAPH <tmp-\"+graph+\"-\"+revision+\">\")\r\n        for rev in graph.find_shortest_path_to_revision(revision):\r\n            execQuery(\"REMOVE GRAPH \"+ rev.add_set_graph+\" FROM GRAPH <tmp-\"+graph+\"-\"+revision+\">\")\r\n            execQuery(\"ADD GRAPH \"+ rev.delete_set_graph+\" TO GRAPH <tmp-\"+graph+\"-\"+revision+\">\")\r\n        query_string.replace(graph, \"tmp-\"+graph+\"-\"+revision)\r\n    result = execQuery(query_string)\r\n    execQuery(\"DROP GRAPH <tmp-*>\")\r\n    return result\r\n```\r\n  \r\n``` \r\ndef update_query(query_string):\r\n    for (graph,revision) in query_string.get_named_graphs_and_revisions():\r\n        newRevision = revision +1\r\n        execQuery(\"ADD GRAPH \"+ rev.delete_set_graph+\" TO GRAPH <tmp-\"+graph+\"-\"+revision+\">\")\r\n        ...\r\n```\r\n    \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}